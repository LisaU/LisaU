<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[手把手教你用Hexo+GitHub+Next创建你自己的博客1]]></title>
    <url>%2F2018%2F04%2F08%2FHexo0408%2F</url>
    <content type="text"><![CDATA[手把手教你 hexo + github搭建自己的博客以及个人主页。网上有很多这样的资料素材，但是没有一个系统化的教程,使你除了搜怎么搭建个人主页外，还要搜hexo使用教程,况且中间还可能遇到多种多样的坑。本篇文章，告诉你怎么使用github提供的空间，以及搭建自己的博客本人亲身检测，绿色无公害； 一、 环境安装1、 安装Git；下载地址GitHub是基于git实现的代码托管。git可能是目前最好用的版本控制系统了，非常受欢迎。GitHub可以免费使用，并且快速稳定。Github上面的世界很精彩，用久了你的眼界会开阔很多。 2、 安装Node.js 下载地址3、 安装Hexo利用 npm 命令即可安装。（在任意位置点击鼠标右键，选择Git bash）；输入： npm install hexo-cli -g npm install hexo-deployer-git --save 第一句是安装hexo，第二句是安装hexo部署到git page的deployer，两个都需要安装。 如下图即安装完成。 二、 初始化Hexo项目1、 创建hexo文件夹安装完成后，在你喜爱的文件夹下（如H:\hexo）， 执行以下指令(在H:\hexo内点击鼠标右键，选择Git bash)， Hexo 即会自动在目标文件夹建立网站所需要的所有文件。 hexo init hexo -v，检查hexo是否安装成功安装 Hexo 完成后，Hexo 将会在指定文件夹中新建所需要的文件。Hexo文件夹下的目录如下： 本地查看效果执行下面语句，执行完即可登录localhost:4000查看效果 hexo generate hexo server 登录localhost:4000，即可看到本地的效果如下： 二、 Github创建仓库Github是趋势，做it的人应今早融入这个大环境！ Github注册后： 1、 新建一个仓库yourusername.github.io 以后就是你的域名了。 2、 建好后进入你的仓库，点击settings 找到GitHub Pages栏目，点击选择一个主题：选择主题：主题生效后，我们的github pages也就设置完毕了，然后你现在在地址栏访问yourusername.github.io就可以测试刚才建好的站点。 3、 将博客部署到Github Pages上配置SSH密钥 配置Github的SSH密钥可以让本地git项目与远程的github建立联系，让我们在本地写了代码之后直接通过git操作就可以实现本地代码库与Github代码库同步。操作如下： 第一步、看看是否存在SSH密钥(keys)首先，我们需要看看是否看看本机是否存在SSH keys,打开Git Bash,并运行: $ cd ~/. ssh 检查你本机用户home目录下是否存在.ssh目录 如果，不存在此目录，则进行第二步操作，否则，你本机已经存在ssh公钥和私钥，可以略过第二步，直接进入第三步操作。 第二步、创建一对新的SSH密钥(keys)$ssh-keygen -t rsa -C &quot;your_email@example.com&quot; 这将按照你提供的邮箱地址，创建一对密钥 Generating public/private rsa key pair. Enter file in which to save the key (/c/Users/you/.ssh/id_rsa): [Press enter] 直接回车，则将密钥按默认文件进行存储。此时也可以输入特定的文件名，比如/c/Users/you/.ssh/github_rsa` 接着，根据提示，你需要输入密码和确认密码（说到这里，如果你很放心，其实可以不用密码，就是到输密码的地方，都直接回车，所以每次push就只管回车就行了。所谓的最安全的密码，就是没有密码 哈哈）。相关提示如下： Enter passphrase (empty for no passphrase): [Type a passphrase] Enter same passphrase again: [Type passphrase again] 输入完成之后，屏幕会显示如下信息： Your identification has been saved in /c/Users/you/.ssh/id_rsa.Your public key has been saved in /c/Users/you/.ssh/id_rsa.pub.The key fingerprint is:01:0f:f4:3b:ca:85:d6:17:a1:7d:f0:68:9d:f0:a2:db your_email@example.com 第三步、在GitHub账户中添加你的公钥运行如下命令，将公钥的内容复制到系统粘贴板(clipboard)中。 clip &lt; ~/.ssh/id_rsa.pub 接着： 登陆GitHub,进入你的Account Settings. 2.选择SSH Keys 3.粘贴密钥，添加即可 第四步、测试可以输入下面的命令，看看设置是否成功，git@github.com的部分不要修改： $ ssh -T git@github.com 如果是下面的反馈： The authenticity of host ‘github.com (207.97.227.239)’ can’t be established.RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.Are you sure you want to continue connecting (yes/no)? 不要紧张，输入yes就好，然后会看到： 第五步、设置用户信息现在你已经可以通过SSH链接到GitHub了，还有一些个人信息需要完善的。 Git会根据用户的名字和邮箱来记录提交。GitHub也是用这些信息来做权限的处理，输入下面的代码进行个人信息的设置，把名称和邮箱替换成你自己的，名字根据自己的喜好自己取，而不是GitHub的昵称。 $ git config --global user.name &quot;ryanlijianchang&quot;//用户名 $ git config --global user.email &quot;liji.anchang@163.com&quot;//填写自己的邮箱 第六步、SSH Key配置成功本机已成功连接到github。 4、 将本地的Hexo文件更新到Github的库中第一步、登录Github打开自己的项目 username.github.io 第二步、打开之后，点击SSH，选择SSH类型地址 第三步、复制地址 第四步、打开你一开始创建的Hexo文件夹（如F:\Blog\Hexo），用记事本打开刚文件夹下的_config.yml文件 第五步、在配置文件里作如下修改，保存 第六步、在Hexo文件夹下执行：hexo g hexo d 或者直接执行 hexo g -d 执行完之后会让你输入github的账号和密码，输入完后就可以登录我们自己的部署在Github Pages服务器上的博客了。对应的地址是 username.github.io(我的是：ryanlijianchang.github.io)。 假如这时候，报错 ERROR Deployer not found: git，那么就是你的deployer没有安装成功，你需要执行如下命令再安装一次： npm install hexo-deployer-git --save 这样，你再执行hexo g -d，你的博客就部署到Github上了。]]></content>
      <categories>
        <category>工具类</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Next</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[手把手教你用Hexo+GitHub+Next创建你自己的博客3]]></title>
    <url>%2F2018%2F04%2F08%2FNH0408%2F</url>
    <content type="text"><![CDATA[经过前面两篇基础文章，接下来我们就可以深入的去了解详细的，更优化的技巧来美化我们的博客了。 一、环境准备 1.安装Git 下载地址：https://git-scm.com/downloads 2.安装Node.js 下载地址：https://nodejs.org/en/ 3.安装hexo 利用 npm 命令即可安装。（在任意位置点击鼠标右键，选择Git bash） npm install -g hexo hexo安装中问题： npm ERR! registry error parsing json 错误 可能需要设置npm代理,执行命令 npm config set registry http://registry.cnpmjs.org hexo:command not found 删除刚刚安装的npm目录，重新执行命令npm install -g hexo安装hexo， -g为全局安装 二、初始化hexo项目 1.创建hexo文件夹 安装完成后，在你喜爱的文件夹下（如H:\hexo）， 执行以下指令(在H:\hexo内点击鼠标右键，选择Git bash)， Hexo 即会自动在目标文件夹建立网站所需要的所有文件。 hexo init（初始化hexo项目） 2.安装依赖包 npm install（安装npm依赖包） 现在我们已经搭建起本地的hexo博客了 hexo命令行使用 常用命令： hexo help #查看帮助hexo init #初始化一个目录hexo new “postName” #新建文章hexo new page “pageName” #新建页面hexo generate #生成网页，可以在 public 目录查看整个网站的文件hexo server #本地预览，’Ctrl+C’关闭hexo deploy #部署.deploy目录hexo clean #清除缓存，强烈建议每次执行命令前先清理缓存，每次部署前先删除 .deploy 文件夹 简写（常用）：hexo n == hexo newhexo g == hexo generatehexo s == hexo serverhexo d == hexo deploy 3.本地预览 执行一下命令： hexo generate 生成网页 hexo server 本地预览 到浏览器输入localhost:4000可以看到（系统再带的博客页面）。 三、更换模板 可能系统自带的模板不满足你的需求，没关系hexo提供了很多模板供你选择 访问：https://hexo.io/themes/选择自己喜欢的模板吧！ 本人选择的模板是MiHo 主题地址 http://blog.minhow.com/2017/08/01/blog/installation-configuration/ 1、搭建自己喜欢的模板 1.1 安装主题 删除hexo自带的themes文件夹在hexo下clone MiHo 主题 $ git clone https://github.com/WongMinHo/hexo-theme-miho.git themes/miho MiHo 主题需要Hexo 3.0或以上版本，请先升级。 1.2 更新主题（提供技术支持） cd themes/miho git pull 1.3 依赖安装 生成站点文章静态数据，用于站内搜索。 npm install hexo-generator-json-content –save 1.4 配置主题 此处需要理解： 与themes文件同级的_config.yml文件是hexo的项目配置文件（以下定义为‘主配置’） 在themes/miho文件中的_config.yml文件是主题的配置文件（以下定义为‘主题配置’） 注：可以在_config.yml中定义变量在模板中&lt;%- config.userurl %&gt;引入 在主配置下找到theme属性将其定义为theme: miho即可 主配置文件属性注释： # Hexo Configuration ## Docs: http://hexo.io/docs/configuration.html ## Source: https://github.com/hexojs/hexo/ # Site #站点信息 title: #标题 subtitle: #副标题 description: #站点描述，给搜索引擎看的 author: #作者 email: #电子邮箱 language: zh-CN #语言 # URL #链接格式 url: #网址 root: / #根目录 permalink: :year/:month/:day/:title/ #文章的链接格式 tag_dir: tags #标签目录 archive_dir: archives #存档目录 category_dir: categories #分类目录 code_dir: downloads/code permalink_defaults: # Directory #目录 source_dir: source #源文件目录 public_dir: public #生成的网页文件目录 # Writing #写作 new_post_name: :title.md #新文章标题 default_layout: post #默认的模板，包括 post、page、photo、draft（文章、页面、照片、草稿） titlecase: false #标题转换成大写 external_link: true #在新选项卡中打开连接 filename_case: 0 render_drafts: false post_asset_folder: false relative_link: false highlight: #语法高亮 enable: true #是否启用 line_number: true #显示行号 tab_replace: # Category &amp; Tag #分类和标签 default_category: uncategorized #默认分类 category_map: tag_map: # Archives 2: 开启分页 1: 禁用分页 0: 全部禁用 archive: 2 category: 2 tag: 2 # Server #本地服务器 port: 4000 #端口号 server_ip: localhost #IP 地址 logger: false logger_format: dev # Date / Time format #日期时间格式 date_format: YYYY-MM-DD #参考http://momentjs.com/docs/#/displaying/format/ time_format: H:mm:ss # Pagination #分页 per_page: 10 #每页文章数，设置成 0 禁用分页 pagination_dir: page # Disqus #Disqus评论，替换为多说 disqus_shortname: # Extensions #拓展插件 theme: landscape-plus #主题 exclude_generator: plugins: #插件，例如生成 RSS 和站点地图的 - hexo-generator-feed - hexo-generator-sitemap # Deployment #部署，将 lmintlcx 改成用户名 deploy: type: git repo: github创库地址.git （需要使用ssh） branch: master 不要担心主题配置文件有中文注释，根据提示走就可以轻松搞定 注意：主配置文件中的 url ，root配置url: https://hjm100.github.io/Blogsroot: /Blogs 如果你想要通过https://hjm100.github.io去访问你的博客root: /因为我的https://hjm100.github.io用来装自己的主页，所以我的博客地址架构如上 虽然选择了自己想要的主题，但是主题中显示有关主体信息，以及博客信息，看着就不舒服 特别是网页底部版权那块，教你怎么改： 修改模板标签(用于一般模板不满足个人需求)步骤：用文本编辑器打开 Hexo 所在的目录打开 themes 目录打开你想要编辑的主题所在的目录中的 layout 目录打开 layout 目录下的 _partial 目录打开 _partial 目录下的 footer.ejs 文件修改底部链接post/copyright.ejs用于修改文章页脚用户链接 好了，至此，本地博客已经搭建起来了，只是本地哦，别人看不到的。下面，我们要部署到Github。 四、外网部署（为的就是省钱–哈哈）： github为我们提供了一个放置静态资源的空间，空间不大但是足以满足你博客以及个人主页的部署 如果有后台就不行了（不过可以选择自己租服务器，一个月就50多，不差钱的同鞋可以考虑一下） 以我的为例：github放置个人主页以及博客 1.申请账号，设置公钥这些老生常谈的话题就不用多说了（直接进入主题） 2.创建代码仓库2.1 点击加号穿件仓库New repository2.2仓库名字格式必须为: yourname.github.io （yourname为你的账号名）2.3进入新建的项目点击Settings设置项目找到GitHub Pages 点击change theme选择模板这时你的项目中就有了生成文件（但是这是系统创建的）2.4 不要删除_config.yml文件直接引入你的个人主页项目即可，默认打开index.html ok此时你的个人主页已经搭建好了 Blogs的搭建，你可以新建一个代码仓库（把这个代码仓库设置为html） 在设置中的GitHub Pages 选择Source 中的下拉框为master branch做法与上一样！ 3.仓库分析（yourname.github.io放个人主页，Blogs存放博客） 4.Blogs上传：将主配置中的deploy属性添加一下代码， deploy: type: git repo: 你github上的Blogs的SSH地址（注意ssh必须是系统最先生成的） branch: master 运行命令行 hexo g 编译文件 hexo d 提交文件即可 4.发布博文 在hexo\source_posts文件夹下新建一个MD文件类型的文档 或者命令行 hexo new 博文创建 --- title: 博文 （博文标题） date: 2017-09-27 14:49:15 （博文时间） categories: hexo #文章文类 tags: web开发技术 （ 文章标签） --- 这里正常写文章即可 # 可以理解为h1(但是#后面一定要有空格) 1$ console.log(&apos;Hello hjm100&apos;) //这里写代码 注意：博文写好之后一定要先在本地查看后在提交！！！！！！ 五、域名的配置（将github提供的二级域名与自己购买的域名绑定）： 1.可以前往腾讯购买一个域名，一般cn域名一年就20多块钱 2.点击 Github 上项目的 Settings，GitHub Pages， 提示Your site is published at http://hjm100.cn (这是我买的域名) Custom domain下面的对话框填写你的域名即可 将独立域名与GitHub Pages的空间绑定 方法一：在站点source目录下面，新建一个名为CNAME的文本文件， 里面写入你要绑定的域名，比如hjm100.cn 方法二：在Repository的根目录下面，新建一个名为CNAME的文本文件， 里面写入你要绑定的域名，比如hjm100.cn 在github上面添加好自己的域名后，不要着急，此时你的域名还没有与博客完全绑定 打开cmd命令行，使用ping hjm100.github.io 查看到git对应的ip地址 前往你购买域名的平台进行ipv4域名解析，输入你ping到的域名即可， 域名解析后，去浏览器访问一下你的域名吧！就是这么神奇！！ 至此你的博客已经搭建完毕了，不要感谢我，本人博客预览hjm100.github.io 域名https添加（让你的域名更加安全） 第一步首先注册一个属于自己的域名，可以选择cn域名，不贵一年就20多元我的域名是hjm100.cn 第二步域名https添加， 1.登录这个网站并注册：https://www.cloudflare.com/（直接使用邮箱注册） 2.注册完毕后登录，如果你之前没有用过，则系统会直接显示 Add a website对话框，再次填写hjm100.cn(你的域名)点击scan DNS Records即可， 系统会自动扫描你的域名（扫描需要等待一定时间） 3.扫描完毕后点击Continue(继续) 4.添加DNS Records typt:CNAME类型 name：www Value: 后续问题请自行百度谢谢！！！！！！ 附件小妙招： 怎么换一台电脑仍然可以使用hexo（亲测有用） 1.在Blogs这个项目中创建hexo分支用来储存开发环境（master分支用来存储生成的静态资源） git branch hexo（新建一个hexo分支） 2.将hexo分支发布在github上(这个时候分支中可能有master分支的文件) git push origin hexo(将代码提交到hexo分支上) 3.切换到hexo分支上（如果有文件就清空分支中的内容除了.git文件） git checkout hexo（切换到hexo分支上） 4.整理你的开发环境hexo,修改hexo下面的.gitignore(限制git上传)文件 bash db.json *.log node_modules/ public/ .deploy*/ 5.删除themes–&gt;miho文件中的 .git文件以及.gitignore 6.将你上述修改的hexo文件提交到hexo分支里面（不要改错奥）在hexo分之下即可 git add . git commit . git push origin hexo 7.当你换电脑的时候，配置公钥以及全局安装npm install -g hexo（请参考以上说明）下载的分支默认显示的是master分支，请切换到hexo分支，cd hexo（进入到hexo文件）执行npm install 安装node模块，按照以上写博客提交博客即可同步 8.切结，修改过hexo文件中的内容后记得提交hexo分支，以免你再次换电脑的时候使用]]></content>
      <categories>
        <category>工具类</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Next</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java常用IO流操作详解]]></title>
    <url>%2F2018%2F04%2F08%2FJava%E5%B8%B8%E7%94%A8IO%E6%B5%81%E6%93%8D%E4%BD%9C%2F</url>
    <content type="text"><![CDATA[1.基本概念IO：Java对数据的操作是通过流的方式，IO流用来处理设备之间的数据传输，上传文件和下载文件，Java用于操作流的对象都在IO包中。 2.IO流的分类图示：（主要IO流） 3.字节流（1）.字节流基类 1）.InputStream InputStream：字节输入流基类，抽象类是表示字节输入流的所有类的超类。 常用方法： // 从输入流中读取数据的下一个字节 abstract int read() // 从输入流中读取一定数量的字节，并将其存储在缓冲区数组 b中 int read(byte[] b) // 将输入流中最多 len 个数据字节读入 byte 数组 int read(byte[] b, int off, int len) // 跳过和丢弃此输入流中数据的 n个字节 long skip(long n) // 关闭此输入流并释放与该流关联的所有系统资源 void close() 2）.OutputStream OutputStream：字节输出流基类，抽象类是表示输出字节流的所有类的超类。 常用方法： // 将 b.length 个字节从指定的 byte 数组写入此输出流 void write(byte[] b) // 将指定 byte 数组中从偏移量 off 开始的 len 个字节写入此输出流 void write(byte[] b, int off, int len) // 将指定的字节写入此输出流 abstract void write(int b) // 关闭此输出流并释放与此流有关的所有系统资源 void close() // 刷新此输出流并强制写出所有缓冲的输出字节 void flush() （2）.字节文件操作流 1）.FileInputStream FileInputStream：字节文件输入流，从文件系统中的某个文件中获得输入字节，用于读取诸如图像数据之类的原始字节流。 构造方法： // 通过打开一个到实际文件的连接来创建一个FileInputStream，该文件通过文件系统中的File对象file指定 FileInputStream(File file) // 通过打开一个到实际文件的连接来创建一个FileInputStream，该文件通过文件系统中的路径name指定 FileInputStream(String name) 常用方法：覆盖和重写了父类的的常用方法。 // 读取f盘下该文件f://hell/test.txt //构造方法1 InputStream inputStream = new FileInputStream(new File(&quot;f://hello//test.txt&quot;)); int i = 0; //一次读取一个字节 while ((i = inputStream.read()) != -1) { // System.out.print(i + &quot; &quot;);// 65 66 67 68 //为什么会输出65 66 67 68？因为字符在底层存储的时候就是存储的数值。即字符对应的ASCII码。 System.out.print((char) i + &quot; &quot;);// A B C D } //关闭IO流 inputStream.close(); // 读取f盘下该文件f://hell/test.txt //构造方法2 InputStream inputStream2 = new FileInputStream(&quot;f://hello/test.txt&quot;); // 字节数组 byte[] b = new byte[2]; int i2 = 0; // 一次读取一个字节数组 while ((i2 = inputStream2.read(b)) != -1) { System.out.print(new String(b, 0, i2) + &quot; &quot;);// AB CD } //关闭IO流 inputStream2.close(); 注： 一次读取一个字节数组，提高了操作效率,IO流使用完毕一定要关闭。 2）.FileOutputStream FileOutputStream：字节文件输出流是用于将数据写入到File，从程序中写入到其他位置。 构造方法： // 创建一个向指定File对象表示的文件中写入数据的文件输出流 FileOutputStream(File file) // 创建一个向指定File对象表示的文件中写入数据的文件输出流 FileOutputStream(File file, boolean append) // 创建一个向具有指定名称的文件中写入数据的输出文件流 FileOutputStream(String name) // 创建一个向具有指定name的文件中写入数据的输出文件流 FileOutputStream(String name, boolean append) 常用方法：覆盖和重写了父类的的常用方法。 OutputStream outputStream = new FileOutputStream(new File(&quot;test.txt&quot;)); // 写出数据 outputStream.write(&quot;ABCD&quot;.getBytes()); // 关闭IO流 outputStream.close(); // 内容追加写入 OutputStream outputStream2 = new FileOutputStream(&quot;test.txt&quot;, true); // 输出换行符 outputStream2.write(&quot;\r\n&quot;.getBytes()); // 输出追加内容 outputStream2.write(&quot;hello&quot;.getBytes()); // 关闭IO流 outputStream2.close(); 注；输出的目的地文件不存在，则会自动创建，不指定盘符的话，默认创建在项目目录下;输出换行符时一定要写\r\n不能只写\n,因为不同文本编辑器对换行符的识别存在差异性。 （3）.字节缓冲流（高效流） 1）.BufferedInputStream BufferedInputStream：字节缓冲输入流，提高了读取效率。 构造方法： // 创建一个 BufferedInputStream并保存其参数，即输入流in，以便将来使用。 BufferedInputStream(InputStream in) // 创建具有指定缓冲区大小的 BufferedInputStream并保存其参数，即输入流in以便将来使用 BufferedInputStream(InputStream in, int size) InputStream in = new FileInputStream(&quot;test.txt&quot;); // 字节缓存流 BufferedInputStream bis = new BufferedInputStream(in); byte[] bs = new byte[20]; int len = 0; while ((len = bis.read(bs)) != -1) { System.out.print(new String(bs, 0, len)); // ABCD // hello } // 关闭流 bis.close(); 2）.BufferedOutputStream BufferedOutputStream：字节缓冲输出流，提高了写出效率。 构造方法： // 创建一个新的缓冲输出流，以将数据写入指定的底层输出流 BufferedOutputStream(OutputStream out) // 创建一个新的缓冲输出流，以将具有指定缓冲区大小的数据写入指定的底层输出流 BufferedOutputStream(OutputStream out, int size) 常用方法： // 将指定 byte 数组中从偏移量 off 开始的 len 个字节写入此缓冲的输出流 void write(byte[] b, int off, int len) // 将指定的字节写入此缓冲的输出流 void write(int b) // 刷新此缓冲的输出流 void flush() BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(&quot;test.txt&quot;, true)); // 输出换行符 bos.write(&quot;\r\n&quot;.getBytes()); // 输出内容 bos.write(&quot;Hello Android&quot;.getBytes()); // 刷新此缓冲的输出流 bos.flush(); // 关闭流 bos.close(); 4.字符流（1）.字符流基类 1）.Reader Reader:读取字符流的抽象类. 常用方法： // 读取单个字符 int read() // 将字符读入数组 int read(char[] cbuf) // 将字符读入数组的某一部分 abstract int read(char[] cbuf, int off, int len) // 跳过字符 long skip(long n) // 关闭该流并释放与之关联的所有资源 abstract void close() 2）.Writer Writer:写入字符流的抽象类. 常用方法： // 写入字符数组 void write(char[] cbuf) // 写入字符数组的某一部分 abstract void write(char[] cbuf, int off, int len) // 写入单个字符 void write(int c) // 写入字符串 void write(String str) // 写入字符串的某一部分 void write(String str, int off, int len) // 将指定字符添加到此 writer Writer append(char c) // 将指定字符序列添加到此 writer Writer append(CharSequence csq) // 将指定字符序列的子序列添加到此 writer.Appendable Writer append(CharSequence csq, int start, int end) // 关闭此流，但要先刷新它 abstract void close() // 刷新该流的缓冲 abstract void flush() （2）.字符转换流 1）.InputStreamReader InputStreamReader：字节流转字符流，它使用的字符集可以由名称指定或显式给定，否则将接受平台默认的字符集。 构造方法： // 创建一个使用默认字符集的 InputStreamReader InputStreamReader(InputStream in) // 创建使用给定字符集的 InputStreamReader InputStreamReader(InputStream in, Charset cs) // 创建使用给定字符集解码器的 InputStreamReader InputStreamReader(InputStream in, CharsetDecoder dec) // 创建使用指定字符集的 InputStreamReader InputStreamReader(InputStream in, String charsetName) 特有方法： //返回此流使用的字符编码的名称 String getEncoding() //使用默认编码 InputStreamReader reader = new InputStreamReader(new FileInputStream(&quot;test.txt&quot;)); int len; while ((len = reader.read()) != -1) { System.out.print((char) len);//爱生活，爱Android } reader.close(); //指定编码 InputStreamReader reader = new InputStreamReader(new FileInputStream(&quot;test.txt&quot;),&quot;utf-8&quot;); int len; while ((len = reader.read()) != -1) { System.out.print((char) len);//????????Android } reader.close(); 注：Eclipse默认使用GBK编码,test.txt文件所以是GBK编码，当指定utf-8编码时所以会乱码。 2）.OutputStreamWriter OutputStreamWriter：字节流转字符流。 构造方法： // 创建使用默认字符编码的 OutputStreamWriter OutputStreamWriter(OutputStream out) // 创建使用给定字符集的 OutputStreamWriter OutputStreamWriter(OutputStream out, Charset cs) // 创建使用给定字符集编码器的 OutputStreamWriter OutputStreamWriter(OutputStream out, CharsetEncoder enc) // 创建使用指定字符集的 OutputStreamWriter OutputStreamWriter(OutputStream out, String charsetName) 特有方法： //返回此流使用的字符编码的名称 String getEncoding() （3）.字符缓冲流（高效流） 1）.BufferedReader BufferedReader：字符缓冲流，从字符输入流中读取文本，缓冲各个字符，从而实现字符、数组和行的高效读取。 构造方法： // 创建一个使用默认大小输入缓冲区的缓冲字符输入流 BufferedReader(Reader in) // 创建一个使用指定大小输入缓冲区的缓冲字符输入流 BufferedReader(Reader in, int sz) 特有方法： // 读取一个文本行 String readLine() //生成字符缓冲流对象 BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(&quot;test.txt&quot;))); String str; //一次性读取一行 while ((str = reader.readLine()) != null) { System.out.println(str);// 爱生活，爱Android } //关闭流 reader.close(); 2）.BufferedWriter BufferedWriter：字符缓冲流，将文本写入字符输出流，缓冲各个字符，从而提供单个字符、数组和字符串的高效写入。 构造方法： // 创建一个使用默认大小输出缓冲区的缓冲字符输出流 BufferedWriter(Writer out) // 创建一个使用给定大小输出缓冲区的新缓冲字符输出流 BufferedWriter(Writer out, int sz) 特有方法： // 写入一个行分隔符 void newLine() （4）.FileReader、FileWriter FileReader：InputStreamReader类的直接子类，用来读取字符文件的便捷类，使用默认字符编码。 FileWriter：OutputStreamWriter类的直接子类，用来写入字符文件的便捷类，使用默认字符编码。 5.高效流效率比对读取f盘下的一个视频文件到项目中：文件大小29.5 MB 读取方式一： FileInputStream inputStream = new FileInputStream(&quot;f://滑板//HEEL_FLIP.mp4&quot;); FileOutputStream outputStream = new FileOutputStream(&quot;HEEL_FLIP.mp4&quot;); int len; // 开始时间 long begin = System.currentTimeMillis(); // 一次读取一个字节 while ((len = inputStream.read()) != -1) { outputStream.write(len); } // 用时毫秒 System.out.println(System.currentTimeMillis() - begin);// 213195 //关闭流释放资源 inputStream.close(); outputStream.close(); 读取方式二： FileInputStream inputStream = new FileInputStream(&quot;f://滑板//HEEL_FLIP.mp4&quot;); FileOutputStream outputStream = new FileOutputStream(&quot;HEEL_FLIP.mp4&quot;); int len; byte[] bs = new byte[1024]; // 开始时间 long begin = System.currentTimeMillis(); // 一次读取一个字节数组 while ((len = inputStream.read(bs)) != -1) { outputStream.write(bs, 0, len); } // 用时毫秒 System.out.println(System.currentTimeMillis() - begin);// 281 inputStream.close(); outputStream.close(); 读取方式三： FileInputStream inputStream = new FileInputStream(&quot;f://滑板//HEEL_FLIP.mp4&quot;); BufferedInputStream bis = new BufferedInputStream(inputStream); FileOutputStream outputStream = new FileOutputStream(&quot;HEEL_FLIP.mp4&quot;); BufferedOutputStream bos = new BufferedOutputStream(outputStream); int len; byte[] bs = new byte[1024]; // 开始时间 long begin = System.currentTimeMillis(); while ((len = bis.read(bs)) != -1) { bos.write(bs, 0, len); } // 用时毫秒 System.out.println(System.currentTimeMillis() - begin);// 78 bis.close(); bos.close();]]></content>
      <categories>
        <category>Java基础</category>
      </categories>
      <tags>
        <tag>Java IO流</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[手把手教你用Hexo+GitHub+Next创建你自己的博客2]]></title>
    <url>%2F2018%2F04%2F08%2FNext0408%2F</url>
    <content type="text"><![CDATA[NexT 拥有丰富而简单的配置,结合第三方服务,打造属于您自己的博客主题配置 NexT 坚持将复杂的细节隐藏,提供尽量少并且简便的设置,保持最大限度的易用性。 一、 选择Hexo主题进入Hexo的官网主题专栏挑选我们喜欢的主题 二、 克隆主题再打开Hexo文件夹下的themes目录（F:\Blog\hexo\themes），右键Git Bash，在命令行输入: git clone https://github.com/iissnan/hexo-theme-next(此处地址替换成你需要使用的主题的地址) 下载中，等待下载完成： 三、 修改Hexo配置文件下载完成后，打开Hexo文件夹下的配置文件_config.yml 修改参数为：theme: hexo-theme-next 四、 部署完成后查看效果hexo d -g]]></content>
      <categories>
        <category>工具类</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Next</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[北国的雨]]></title>
    <url>%2F2016%2F08%2F19%2F%E5%8C%97%E5%9B%BD%E7%9A%84%E9%9B%A8%2F</url>
    <content type="text"><![CDATA[北国的雨，似乎有种魔力。她的身影细细碎碎，她的声音懵懵懂懂，她总让你有种不想去上班、上课的冲动。你懒懒的，而她却很欢快，滴滴嗒嗒地落在地上，然后又轻灵的跳起来，在水面上散成一朵朵的白荷花，随风钻入你的裤脚，挠你的痒，扰你的心。还让你的路泥泞，让你的地铁晚点，但是呢！你绝不会因为这个而恼她，因为她是你的五彩斑斓啊！春雨温柔，夏雨欢快，秋雨萧瑟，冬雨冷凛，春夏秋冬，柳莲枫梅，她是你平凡的生活的一抹亮色，也给你静静思考的勇气。 北京的雨，已经很有味道了。但总觉得不够，是觉得雨敲打在钢筋混凝土上声音不够轻灵吗？还是觉得若是没有一点点鸟飞虫鸣相伴不够有生气吗？抑或是觉得若是没有几株细草小花点缀不够诗意呢？似乎没有明确答案，但我还是喜欢老家的雨多些！是因为北京的雨不喜欢像我这样一枚头发蓬乱、眼光呆滞、胸无大志的屌丝吗？似乎缺少了点生活的生气啊！要不然，每次搭乘滴滴和司机闲聊时，他总是一语道破：“你们是搞IT的吧！”。十个有八个可以猜到，我去，难道我们脑门上写了“程序猿”三个字吗？从这个原因看，好像我和北京的雨很不搭呢！ 是因为北京的雨有些孤单吗？她从天上来，本希望有青山绿水相伴：“风过镜湖起渏涟，雨落青山生云烟”，可以有荷花秋菊相伴：“一塘夜雨敲荷韵，几壑秋风探菊踪”，也可以有窗棂春风相伴“雨落敲窗，且听风吟”，而现在，没有流水落花，也没有水润清尘，只能落入下水道，随着污秽无语凝噎了。雨落在身上，她的孤单凉意好像我也有了，茫茫然的人群，匆匆地在我身旁走过，淹没在夜色里，再无交集。北京的雨是孤单了啊！雨好像小了点，天色也黑了点，遥想老家的雨也染了墨吧！没有高楼大厦、霓虹灯光的遮掩，她才显得更加纯粹，更有味道。那些繁密的树木，那些莽莽杂草，还有远方的天空和脚下的蛐蛐，和雨一起被染成的一样颜色。脚踩在泥泞上，啧啧作响，也像诗一样有了平平仄仄的韵味。偶尔，有几滴雨落在眼里，再去瞧瞧远方的田地，苞谷幼苗满满延伸出去，在广阔无际的田里氤氲起雾气。那种感觉好像苏轼在大江上，醉眼朦胧，心生辽阔之意，熏熏然醉在其中。 要是冬天啊！她也不会如北京的雨一样夹杂着粗砺风沙，也不会像江南的雨那样浸润着花香，更不会像广州的雨那样磅礴粗暴。她只是雨，也许带着些干冷，也许也带着些寒风，但她绝不容许砂子和青苔的沾染。她只是简简单单，枝杈分明，天宽地广。她是中和了北国和南国的特点啊！从广州到北京，从南方的磅礴大雨到北国少了一点味道的雨，总有一些飘忽不定的感觉。悠悠荡荡，无处落脚，不禁心生杂念。不免有些失落，好像被一种叫做浮躁的牢，紧紧束缚，无法呼吸。下雨天，总是能让人静静的。 预报说明天是晴天，也有可能气象局的程序猿正在昏昏沉沉的敲代码，从而更新错了天气。就算是那样，又有什么关系呢！ 于北京]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>生活态度</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[行于路上2]]></title>
    <url>%2F2015%2F08%2F18%2F%E8%A1%8C%E4%BA%8E%E8%B7%AF%E4%B8%8A2%2F</url>
    <content type="text"><![CDATA[天昏沉地睡着了。薄薄的雾气遮掩着她的脸庞，偶尔滴下几滴泪水。是她感觉夏天过去，秋天来了的悲伤吗？亦或是年纪大了的癔症？在这样的氛围里坐上火车回家，跟随着窗外像静物画一样的风景入睡。耳朵里纷杂的噪声也像在睡梦中的梦呓。轰隆隆的火车呼啸而过的也是我的青春年少。钱钟书《围城》里说“爱情是一个围城”。我却想说“时间也是个围城，正呆在里面的人，感觉时间很慢，急切地想过完。可回忆过去，却又恨不得吃一万颗后悔药，想重返十八岁。”记得大学来的时候是上午，阳光灿烂。看着外面的一马平川，恨不得也像杜甫一样站在山顶，大声喊着“会当凌绝顶，一览众山小。”也记得当初看着图书馆，对赵小爽发短信说“立志横扫图书馆”，现在看来，只能一声哭笑，呵呵。曾经满怀憧憬的说“愿岁月静好，永远不变。”可岁月是把毒饲料，不仅把我变成了小胖子，也把我变成了一个曾经最讨厌的自己。原来我这样啊！以前学习超刻苦，感觉不会玩游戏，不会放纵自己，时刻以清新脱俗文艺男自居，偶尔发个说说，写一点狗屁不通的日志。过节我会很细心地一个个写短信问候，完全手工，完全清新，尽管他们说我骚情。晚上，我会给一个朋友说晚安。假期我也会和一个女生聊一些无聊琐事。我也会很骚的去和张风雨一起骑单车唱老男孩，然后更骚情的去火车轨道上吹呼啸而过的风。我也会很装的在窗户边看个闲书，偶尔看一下过路的美眉。我也会给所有的朋友打个电话，尽管不知道说啥，尽管我其实是个喜欢安静的人，我也会和他们聊聊。我也会对每一个女生好，很细心的发一个短信或者微笑。当然，我也会写一个下雨天或者下雪天，愉悦的或者悲伤的说说，尽管当初刘帅说我很骚逼。原来当初我的日子是如此多彩啊！是那么特立独行啊！而现在我会很长时间的打游戏；我会长达几年不给朋友打个电话，然后慢慢失联，慢慢相忘于天涯；我会窝在宿舍里自己发着呆从早上到晚上；我也会感觉做什么都感觉无聊，日子就只剩下睡吃睡。我不会在节日的时候发短信，也不会在空间里肆意污染，更不会说去外边走走停停。所以现在感觉很疲倦，虽然知道这种日子仍将继续。可能在火车上犯了困，也可能很久没写了，所以说了好多废话。我想我会慢慢找回自己，尽管我知道这有多难。现在不听你们说我骚情，反而感觉很不适应了。感觉自己丢了，走在冷风中的岔路口里，不知方向。今年二十三了，我选择二战，不知道是对是错，也没有惋惜或者后悔，也不知道自己为什么这么执着。再看看窗外，天黑了，彻底睡着了。青黑色的万物安静，雨不疾不徐的下着，就静静地下着。既不惹人，也不袭人。不悲不喜。行于路上，尽管外面下着雨。八月晚上，考研备战 自习室中 雨]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>生活态度</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[行于路上]]></title>
    <url>%2F2011%2F08%2F31%2F%E8%A1%8C%E4%BA%8E%E8%B7%AF%E4%B8%8A1%2F</url>
    <content type="text"><![CDATA[行于路上！带些许留恋，也带一分憧憬。我离开这里，行于路上…窗外一帘青翠，在绿叶中隐约可见那些村子。极目远忘。，千里平原，一马平川，万亩良田。浩浩荡荡，雄阔异常。那呼啸而过的风，那交错而行的路，那阳光，那飞鸟…望着那苍天，意绪飞扬，路怎么弯，总回到达终点。天怎么蓝，总有暴风骤雨。可我们无法承受生命之轻，总想为记忆留下坎坷，所以我行于路上。明天谁可预知，命运无法安排。当赏高山之雄伟，便有欲与比高的胆气。当玩明月之皎洁，便有思乡怀人的幽情。此刻，目平原之辽阔，心中便涌动着感慨与激动。雄心壮志与幽远平淡共舞，青春热血与心中感慨齐飞。那当你失志潦倒时便看一看平原吧，这里可以给你希望和慰藉。因为我始终相信注定会有一段缥缈的音韵点染冗重的今生，所以我行于路上，一生追求……… 于邓州至郑州 第一次离开家乡上大学的途中 2011-8-31日 晴]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>生活态度</tag>
      </tags>
  </entry>
</search>
